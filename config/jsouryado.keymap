/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>

/* On demand includes */


/* Helper Macros, based on https://github.com/urob/zmk-helpers/ */

#pragma once

#define ZMK_HELPER_STRINGIFY(x) #x

// Preprocessor mechanism to overload macros, cf. https://stackoverflow.com/a/27051616/6114651
#define VARGS_(_10, _9, _8, _7, _6, _5, _4, _3, _2, _1, N, ...) N
#define VARGS(...) VARGS_(__VA_ARGS__, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define CONCAT_(a, b) a##b
#define CONCAT(a, b) CONCAT_(a, b)

#define ZMK_BEHAVIOR_CORE_tap_dance  \
    compatible = "zmk,behavior-tap-dance"; \
    #binding-cells = <0>

#define ZMK_BEHAVIOR(name, type, ...) \
    name: name { \
        ZMK_BEHAVIOR_CORE_ ## type; \
        __VA_ARGS__ \
    };

#define ZMK_TAP_DANCE(name, ...) \
    ZMK_BEHAVIOR(name, tap_dance, __VA_ARGS__)

#define ZMK_TD_LAYER(name, layer) \
    ZMK_TAP_DANCE(name, \
        tapping-term-ms = <200>; \
        bindings = <&mo layer>, <&to layer>; \
)

/* Automatically generated layer name #define */
#define LAYER_QWERTY 0
#define LAYER_Enthium 1
#define LAYER_Engrammer 2
#define LAYER_Engram 3
#define LAYER_Dvorak 4
#define LAYER_Colemak 5
#define LAYER_ColemakDH 6
#define LAYER_Canary 7
#define LAYER_Typing 8
#define LAYER_LeftPinky 9
#define LAYER_LeftRingy 10
#define LAYER_LeftMiddy 11
#define LAYER_LeftIndex 12
#define LAYER_RightPinky 13
#define LAYER_RightRingy 14
#define LAYER_RightMiddy 15
#define LAYER_RightIndex 16
#define LAYER_Cursor 17
#define LAYER_Number 18
#define LAYER_Function 19
#define LAYER_Emoji 20
#define LAYER_Symbol 21
#define LAYER_Mouse 22
#define LAYER_MouseSlow 23
#define LAYER_MouseFast 24
#define LAYER_MouseWarp 25
#define LAYER_System 26
#define LAYER_World 27
#define LAYER_Gaming 28
#define LAYER_Factory 29
#define LAYER_Lower 30
#define LAYER_Magic 31

/* Input Listeners */


/* System behavior and Macros */
/ {
    behaviors {
        ZMK_TD_LAYER(lower, LAYER_Lower)
    };
};

/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};


/{

    keymap {
        compatible = "zmk,keymap";

        LAYER_QWERTY {
            display-name = "Default Layer";

            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
            //            | BSPC | LWR | ESC |   | TAB | SPC  | ENT |

            bindings = <
&kp Q  &kp W  &kp E     &kp R    &kp T      &kp Y    &kp U      &kp I      &kp O    &kp P
&kp A  &kp S  &kp D     &kp F    &kp G      &kp H    &kp J      &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C     &kp V    &kp B      &kp N    &kp M      &kp COMMA  &kp DOT  &kp FSLH
              &kp BSPC  &kp DEL  &kp ESC    &kp TAB  &kp SPACE  &kp RET
            >;
        };

        LAYER_Cursor {
            bindings = <
&trans  &trans  &trans  &trans  &kp K_CUT      &kp INSERT  &kp K_UNDO  &kp UP       &kp K_REDO     &trans
&trans  &trans  &trans  &trans  &kp K_CUT      &kp DELETE  &kp LEFT    &kp DOWN     &kp RIGHT      &trans
&trans  &trans  &trans  &trans  &kp K_PASTE    &kp TAB     &kp HOME    &kp PAGE_UP  &kp PAGE_DOWN  &kp END
                &trans  &trans  &trans         &trans      &trans      &trans
            >;
        };
    };
};
